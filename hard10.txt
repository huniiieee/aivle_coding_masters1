문제:
제임스는 외부의 침략으로부터 마을을 지킬 수 있는 부메랑 무기를 개발하는 무기 공학자입니다. 
제임스는 자신의 동료인 토마스로부터 최고급 나무 재료를 구했습니다. 
이 나무 재료는 N X M 크기의 넓은 사각형 형태이며 나무 재료의 부위마다 그 강도가 조금씩 다릅니다.

예를 들어 나무 재료의 크기가 2 X 3일 때는 다음과 같이 총 6칸으로 구성되며 각 위치마다 작게는 1부터 크게는 100까지의 강도를 가지게 됩니다.

7 5 4
3 2 9

제임스는 이처럼 넓은 사각형 형태의 나무 재료를 잘라서 여러 개의 부메랑을 만들고자 합니다. 
부메랑은 항상 3칸을 차지하는 ㄱ 모양으로 만들어야 합니다. 
(회전을 시킬 수 있으므로 부메랑의 가능한 모양은 총 4가지가 됩니다.) 이 때 부메랑의 중심이 되는 칸은 강도의 영향을 2배로 받습니다.

예를 들어 위 예시에서 다음과 같은 부메랑 하나를 만들었다고 가정합니다.

7 5
3

이 때 부메랑의 총 강도는 7 * 2 + 5 + 3 = 22가 됩니다. 
결과적으로 위 예시에서는 총 2개의 부메랑을 만들 수 있으며 이 때 가능한 총 최대 강도는 46입니다.

나무 재료의 형태와 각 위치의 강도가 주어졌을 때 제임스가 만들 수 있는 부메랑들의 강도의 합의 최댓값을 출력하는 프로그램을 작성하세요.

답안:
import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
	static int max=0;
	
	static void boomerang(int [][]map,boolean [][]visited,int sum)
	{
		
		
		for(int i=0;i<map.length;i++)
		{
			for(int j=0;j<map[0].length;j++)
			{
				if(visited[i][j])
					continue;
				if(i-1>=0&&j-1>=0&&!visited[i-1][j]&&!visited[i][j-1])
				{
					visited[i-1][j]=true;
					visited[i][j-1]=true;
					visited[i][j]=true;
					boomerang(map,visited,sum+map[i-1][j]+map[i][j-1]+map[i][j]*2);
					visited[i-1][j]=false;
					visited[i][j-1]=false;
					visited[i][j]=false;
				}
				if(i-1>=0&&j+1<map[0].length&&!visited[i-1][j]&&!visited[i][j+1])
				{
					visited[i-1][j]=true;
					visited[i][j+1]=true;
					visited[i][j]=true;
					boomerang(map,visited,sum+map[i-1][j]+map[i][j+1]+map[i][j]*2);
					visited[i-1][j]=false;
					visited[i][j+1]=false;
					visited[i][j]=false;
				}
				if(j-1>=0&&i+1<map.length&&!visited[i][j-1]&&!visited[i+1][j])
				{
					visited[i][j-1]=true;
					visited[i+1][j]=true;
					visited[i][j]=true;
					boomerang(map,visited,sum+map[i][j-1]+map[i+1][j]+map[i][j]*2);
					visited[i][j-1]=false;
					visited[i+1][j]=false;
					visited[i][j]=false;
				}
				if(j+1<map[0].length&&i+1<map.length&&!visited[i+1][j]&&!visited[i][j+1])
				{
					visited[i+1][j]=true;
					visited[i][j+1]=true;
					visited[i][j]=true;
					boomerang(map,visited,sum+map[i+1][j]+map[i][j+1]+map[i][j]*2);
					visited[i+1][j]=false;
					visited[i][j+1]=false;
					visited[i][j]=false;
				}			
			}
		}
		if(sum>max)
			max=sum;
		return;
		
	}
 public static void main(String[] args) throws IOException { 

     Scanner scanner = new Scanner(System.in); 

     int row = scanner.nextInt(); 

     int col = scanner.nextInt(); 

     int [][]map=new int[row][col];
     for(int i=0;i<row;i++)
     {
    	 for(int j=0;j<col;j++)
    	 {
    		 map[i][j]=scanner.nextInt();
    	 }
     }
     boolean [][] visited= new boolean[row][col];
     if(row==1||col==1)
     {
         System.out.print(0);
         return;
     }
     boomerang(map,visited,0);
     System.out.println(max);
 }
}