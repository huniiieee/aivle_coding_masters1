문제:
세경이는 삼각형 형태를 가지는 산의 정상에 올라왔습니다. 산의 정상에서 아래를 내려다 보니 무수히 많은 동전들이 내려가는 길목에 존재한다는 것을 깨달았습니다. 
그래서 세경이는 이왕 산을 내려가는 김에 가장 많은 양의 동전을 줍고자 합니다.

다만 세경이는 게으르기 때문에 조금이라도 산을 내려가면 다시 올라가지 않습니다. 
세경이가 산을 내려갈 때는 바로 아래로 내려가거나, 한 칸 오른쪽으로 내려갑니다. 
세경이가 산을 다 내려올 때까지 주을 수 있는 동전의 최대 개수를 구하는 프로그램을 작성하세요.

예를 들어 산의 높이가 3이고, 다음과 같이 동전이 떨어져 있다고 가정해봅시다.

5
10 30
20 12 7

이 때 주을 수 있는 동전의 최대 개수는 (5, 30, 12)로 총 47개입니다.

답안:
//don't place package name. 

import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
 public static void main(String[] args) throws IOException { 

     Scanner scanner = new Scanner(System.in); 

     int height = scanner.nextInt(); 
     int [][]coin=new int[height][height+1];
     
     for(int i=0;i<height;i++)
     {
    	 for(int j=0;j<i+1;j++)
    	 {
    		 coin[i][j]=scanner.nextInt();
    	 }
     }
     
     for(int i=1;i<height;i++)
     {
    	 coin[i][0]=coin[i][0]+coin[i-1][0];
     }
     
     for(int i=1;i<height;i++)
     {
    	 for(int j=1;j<i+1;j++)
    	 {
    		 coin[i][j]=Integer.max(coin[i-1][j-1],coin[i-1][j])+coin[i][j];
    	 }
     }
     
     int result=0;
     for(int i=0;i<height;i++)
     {
    	 result=Integer.max(result,coin[height-1][i]);
     }
     
     System.out.println(result);

 }
}