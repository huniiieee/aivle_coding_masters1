문제:
영양 점수란 어떠한 요리가 얼마나 영양면에서 완벽한지 알아보는 척도입니다.
 어떠한 요리가 있을 때, 이 요리의 영양 점수는 맛이나 모양이 아닌 요리에 들어간 모든 식재료들에게서 발현되는 영양 점수의 합을 말합니다. 
 모든 식재료는 자기 자신으로는 영양 점수를 가질 수 없습니다. 
모든 식재료는 두개 씩 재료가 서로 조합이 되었을 때 비로소 영양 점수가 발현됩니다.

예를 들어 식재료로 A, B, C, D가 있다고 했을 때 A와 B를 뽑아서 음식을 만든다면,
 A가 B랑 조합될 때의 A에서 발현 되는 영양 점수와 B가 A랑 조합될 때 B에서 발현 되는 영양 점수를 합한 것이 음식의 최종 영양 점수가 됩니다.
  이는 (A, B) + (B, A)로 표현할 수 있습니다.

같은 이치로 식재료로 A, B, C, D, E, F,가 있다고 했을 때 A, B, C를 뽑아서 음식을 만든다면,
(A, B) + (B, A) + (A, C) + (C, A) + (B, C) + (C, B)가 됩니다. 무조건 식재료는 두 개씩 서로 발현되는 것입니다.

주성이는 영양 점수에 대해 공부한 후 요리실습을 하려고 합니다. 주성이는 항상 두 가지 요리를 만들고 싶습니다. 
이 때 두 요리의 영양 점수의 차이를 최소화하려고 합니다. 또한 현재 주성이가 가지고 있는 식재료의 개수가 N이라고 할 때, 각 요리당 N / 2가지의 식재료를 사용하고,
 요리들의 식재료가 중복되지 않도록 할 생각입니다.

다시 말해 주성이는 가지고 있는 식재료를 정확히 반으로 나누어서 각 요리에 적용하려고 합니다. 
따라서 주성이가 가지고 있는 식재료의 개수는 반드시 짝수로 주어집니다. 
각각의 식재료들이 두 개씩 조합되었을 때 발현되는 영양 점수가 행렬 형태로 주어졌을 때 주성이가 생각한대로 요리를 할 수 있게 하는 프로그램을 만드세요.

답안:
import java.io.*;

import java.util.*; 

// don't change 'Main' class name and  'public' accessor. 

public class Main {
	static int min=Integer.MAX_VALUE;
	
	static int check(int[][]graph,boolean[]visited)
	{
		int cnt1=0;
		int cnt2=0;
		for(int i=0;i<graph.length-1;i++)
		{
			for(int j=i+1;j<graph.length;j++)
			{
				if(visited[i]&&visited[j])
				{
					cnt1=cnt1+graph[i][j]+graph[j][i];
				}
				else if(!visited[i]&&!visited[j])
				{
					cnt2=cnt2+graph[i][j]+graph[j][i];
				}
			}
			
		}
		return Math.abs(cnt1-cnt2);
	}
	static void findMin(int[][]graph,boolean[]visited,int size)
	{
		if(size==graph.length/2-1)
		{
			int m=check(graph,visited);
			if(min>m)
				min=m;
			return;
		}
		
		for(int i=1;i<graph.length;i++)
		{
			if(!visited[i])
			{
				visited[i]=true;
				findMin(graph,visited,size+1);
				visited[i]=false;
			}
		}
	}
    public static void main(String[] args) throws IOException { 

        Scanner scanner = new Scanner(System.in); 

        int num = scanner.nextInt(); 

        int [][]graph=new int[num][num];
        boolean[]visited=new boolean[num];
        visited[0]=true;
        for(int i=0;i<num;i++)
        {
        	for(int j=0;j<num;j++)
        	{
        		graph[i][j]=scanner.nextInt();
        	}
        }
        
        findMin(graph,visited,0);
        System.out.println(min); 

    }
}