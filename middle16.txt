문제:(백트래킹)
자리 바꾸기 시간이 돌아왔습니다! 
담임 선생님인 철수는 N x 2 형태의 교실에 2N명의 학생을 앉혀야 합니다. 
학생들에게는 1번부터 2N번까지 번호가 붙어있습니다.

학생들을 어떤 방식으로 앉히느냐에 따라 교실의 분위기 점수가 결정됩니다. 
분위기 점수는 0에서 시작하고, i(1 ≤ i ≤ N)번 행에 앉은 두 학생의 관계가 좋으면 +1점, 보통이면 0점, 나쁘면 -1점이 분위기 점수에 더해집니다. 
어떤 두 학생의 관계가 좋지도 나쁘지도 않으면 두 학생의 관계는 보통입니다.

학생들을 적절히 배치하여 얻을 수 있는 분위기 점수의 최댓값을 구하는 프로그램을 작성해주세요.

답안:

//don't place package name. 

import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
	
	static int maxMood=Integer.MIN_VALUE;
	
	static int mood(int []arr,int[][]graph)
	{
		int score=0;
		for(int i=0;i<arr.length/2;i++)
		{
			score += graph[arr[i*2]][arr[i*2+1]];
		}
		return score;
	}

	
	static void findMaxMood(int []arr,int [][]graph,boolean[]visited,int depth)
	{
		if(depth==graph.length)
		{
			int tempScore=mood(arr,graph);
			maxMood=Integer.max(tempScore,maxMood);
			return;
		}
		
		
		for(int i=0;i<graph.length;i++)
		{
			
			if(!visited[i])
			{
				visited[i]=true;
				arr[depth]=i;
				findMaxMood(arr,graph,visited,depth+1);
				visited[i]=false;
			}
		}
	}
 public static void main(String[] args) throws IOException { 

     Scanner scanner = new Scanner(System.in); 

     int num = scanner.nextInt(); 
     
     int realNum=scanner.nextInt();
     int [][]graph= new int[num*2][num*2];
     for(int i=0;i<realNum;i++)
     {
    	 int score=scanner.nextInt();
    	 int a=scanner.nextInt();
    	 int b=scanner.nextInt();
    	 if(score==1)
    	 {
    		 graph[a-1][b-1]=score;
        	 graph[b-1][a-1]=score;
    	 }
    	 else if(score==2)
    	 {
    		 graph[a-1][b-1]=-1;
        	 graph[b-1][a-1]=-1;
    	 }
    	 else
    	 {
    		 continue;
    	 }
   
     }
     int[]arr=new int[num*2];
     boolean[]visited=new boolean[num*2];
     
     findMaxMood(arr,graph,visited,0);
     System.out.println(maxMood); 

 }
}