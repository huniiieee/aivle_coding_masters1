문제:
재승이의 집은 3행 3열의 버튼이 있는 도어락이 설치되어 있습니다. 
재승이는 완벽하며 매사에 최선을 다하기 때문에, 비밀번호를 입력할 때 절대 틀리지 않으며 버튼도 최대한 빠르게 누릅니다. 

재승이가 버튼을 최대한 빠르게 누를 때, 누르려는 버튼과 방금 누른 버튼의 상대적 위치에 따라 걸리는 시간은 다음과 같습니다.

- 같은 버튼인 경우 1 ms
- 한 변 또는 모서리를 공유하는 경우 2 ms
- 그 밖의 경우 3 ms

버튼을 누르면 ‘삑’ 하는 버튼 입력음이 납니다. 착한 친구 승재는 “내 계산 결과 네 비밀번호의 경우의 수는 X가지밖에 안 돼. 
더 강력한 비밀번호로 바꾸지 않을래?”라고 조언하려 합니다.

승재는 타고난 리듬감으로 재승이가 각 버튼을 누르는데 걸린 시간을 완벽하게 기록했습니다. 하지만 경우의 수를 어떻게 계산해야 할지 몰라 당황하고 있습니다.
승재를 도와주세요.

답안:

import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
	
	static void change(long[][]map,int s)
	{
		if(s==1)
			return;
		else if(s==2)
		{
			long [][]temp=new long[5][5];
			for(int i=0;i<5;i++)
				temp[i]=Arrays.copyOf(map[i], 5);

			for(int i=1;i<=3;i++)
			{
				for(int j=1;j<=3;j++)
				{
					temp[i][j]=(map[i-1][j-1]+map[i-1][j]+map[i-1][j+1]+map[i][j-1]+map[i][j+1]+map[i+1][j-1]+map[i+1][j]+map[i+1][j+1])%1000000007;
				}
			}
			for(int i=0;i<5;i++)
				map[i]=Arrays.copyOf(temp[i], 5);
		}
		else
		{
			long [][]temp=new long[5][5];
			for(int i=0;i<5;i++)
				temp[i]=Arrays.copyOf(map[i], 5);
			temp[1][1]=(map[1][3]+map[2][3]+map[3][3]+map[3][1]+map[3][2])%1000000007;
			temp[1][2]=(map[3][1]+map[3][2]+map[3][3])%1000000007;
			temp[1][3]=(map[1][1]+map[2][1]+map[3][1]+map[3][2]+map[3][3])%1000000007;
			temp[2][1]=(map[1][3]+map[2][3]+map[3][3])%1000000007;
			temp[2][2]=0;
			temp[2][3]=(map[1][1]+map[2][1]+map[3][1])%1000000007;
			temp[3][1]=(map[1][1]+map[1][2]+map[1][3]+map[2][3]+map[3][3])%1000000007;
			temp[3][2]=(map[1][1]+map[1][2]+map[1][3])%1000000007;
			temp[3][3]=(map[3][1]+map[2][1]+map[1][1]+map[1][2]+map[1][3])%1000000007;
			for(int i=0;i<5;i++)
				map[i]=Arrays.copyOf(temp[i], 5);
		}
		
	}
	static long num(long[][]map,int []second)
	{
		for(int s:second)
		{
			change(map,s);
		}
		long cnt=0;
		for(int i=1;i<=3;i++)
		{
			for(int j=1;j<=3;j++)
			{
				cnt=(cnt+map[i][j])%1000000007;
			}
		}
		return cnt;
	}
public static void main(String[] args) throws IOException { 

   Scanner scanner = new Scanner(System.in); 

   int num = scanner.nextInt(); 
   
   int []second=new int[num-1];
   for(int i=0;i<num-1;i++)
  	 second[i]=scanner.nextInt();
   
   long [][]map=new long[5][5];
   for(int i=1;i<=3;i++)
   {
  	 for(int j=1;j<=3;j++)
  	 {
  		 map[i][j]=1;
  	 }
   }
   

   System.out.println(num(map,second));

}
}