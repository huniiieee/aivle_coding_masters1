문제:
화가인 지연이는 그림판에서 N x M 크기의 격자판을 칠하여 그림을 그렸습니다. 
각 칸은 검정색, 빨간색, 파란색 3개의 색 중 하나로 칠해져 있거나 빈 칸입니다. 
그림은 얼핏 보면 검정색으로 구분된 여러 개의 영역으로 나뉜 것 같아 보입니다. 
이때 검정색이 아닌 두 칸이 상하좌우로 인접하다면 하나의 영역에 속하는 것으로 간주합니다.

그림을 유심히 보던 지연이는 같은 영역 안에 있는 색들을 하나의 색으로 통일하고 싶었습니다. 
그래서 다음과 같이 각각의 영역을 수정하기로 했습니다.
하나의 영역에 대해,
i) 빨간색과 파란색으로 칠해져 있는 칸의 수가 동일하거나, 파란색으로 칠해져 있는 칸이 더 많다면 빨간색으로 칠해져 있는 칸의 색깔을 지우고 빈 칸으로 만듭니다.
ii) 빨간색으로 칠해져 있는 칸이 더 많다면 이번에도 역시 파란색으로 칠해져 있는 칸의 색깔을 지우고 빈 칸으로 만듭니다.

그림의 정보가 주어질 때, 지연이가 수정 작업을 끝내고 그림에 남은 빨간색 칸, 파란색 칸의 개수를 각각 출력하세요.

답안:(BFS)

//don't place package name. 

import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
	
	static int red=0;
	static int blue=0;
	static int[]dx= {1,0,-1,0};
	static int[]dy= {0,1,0,-1};
	static class Node{
		int x,y;
		Node(int x,int y)
		{
			this.x=x;
			this.y=y;
		}
	}
	
	static void bfs(char [][]map,int r,int c)
	{
		int row=map.length;
		int col=map[0].length;
		
		Queue<Node> q =new LinkedList<>();
		q.offer(new Node(r,c));
		
			
		
		int B=0;
		int R=0;
		
		if(map[r][c]=='A')
		{
			R++;
			map[r][c]='X';
		}
		else if(map[r][c]=='B')
		{
			B++;
			map[r][c]='X';
		}
		else
		{
			map[r][c]='X';
		}
		
		
		while(!q.isEmpty())
		{
			Node cur=q.poll();
			int x=cur.x;
			int y=cur.y;
			for(int i=0;i<4;i++)
			{
				int nx=x+dx[i];
				int ny=y+dy[i];
				if(nx>=0&&nx<row&&ny>=0&&ny<col&&map[nx][ny]!='X')
				{
					if(map[nx][ny]=='A')
					{
						R++;
						q.offer(new Node(nx,ny));
						map[nx][ny]='X';
					}
					else if(map[nx][ny]=='B')
					{
						B++;
						q.offer(new Node(nx,ny));
						map[nx][ny]='X';
					}
					else
					{
						q.offer(new Node(nx,ny));
						map[nx][ny]='X';
					}
				}
			}
			
		}
		
		if(B>=R)
			blue= blue+B;
		else
			red=red+R;
		
	}
	
	static void result(char[][]map)
	{
		int row=map.length;
		int col=map[0].length;
		
		for(int i=0;i<row;i++)
		{
			for(int j=0;j<col;j++)
			{
				if(map[i][j]!='X')
				{
					bfs(map,i,j);
				}
				
			}
		}
	}
 public static void main(String[] args) throws IOException { 

     Scanner scanner = new Scanner(System.in); 

     int row = scanner.nextInt(); 

     int col = scanner.nextInt(); 
     scanner.nextLine();
     
     char [][]map=new char[row][col];
     for(int i=0;i<row;i++)
     {
    	 String temp=scanner.nextLine();
    	 for(int j=0;j<col;j++)
    	 {
    		 map[i][j]=temp.charAt(j);
    	 }
     }
     result(map);
     System.out.print(red+" "+blue);
    

 }
}