문제:
원형으로 길게 생긴 사탕 케이스 안에는 1번부터 순차적으로 번호가 적힌 사탕들이 들어가 있습니다. 
케이스의 폭은 사탕 하나의 크기와 같아서 안에 있는 사탕을 꺼내려면 원형으로 길게 생긴 사탕 케이스를 왼쪽 혹은 오른쪽으로 회전시키면서 사탕을 꺼내야 합니다. 
또한 사탕을 꺼낼 때에는 케이스에서 오직 첫 번째 위치의 사탕만을 꺼낼 수 있습니다.

예를 들어 케이스 안에 각각 1 2 3 4 5번의 사탕이 있는 경우, 이 때 3번 사탕을 꺼낼 수 있는 방법은 다음과 같은 경우들을 예시로 들 수 있을 것입니다.

1. 사탕들을 우회전 시켜서 5번 사탕을 왼쪽 끝으로 가도록 보내고, 한 번 더 우회전 시켜서 이번에는 4번 사탕이 왼쪽 끝으로 가도록 보내고, 
마지막으로 한 번 더 우회전 시켜서 비로소 3번 사탕이 왼쪽 끝에 도달할 수 있도록 하여 꺼냅니다.
2. 위 예시와는 반대로 두 번의 좌회선 이후에 3번 사탕을 꺼냅니다.

위 두 가지 예시는 모두 3번 사탕을 꺼내도록 해주지만, 첫 번째 예시는 3번의 회전이 필요하며 두 번째 예시는 2번의 회전이 필요하다는 차이가 있습니다.

입구에서 사탕을 꺼낼 수 있는 사탕 케이스가 있고, 1번부터 N번까지 차례대로 들어가 있는 형태의 사탕의 개수 N과, 
꺼내고자 하는 사탕의 개수와 번호가 주어졌을 때 좌회전 혹은 우회전을 사용하여 사탕의 위치를 최소 몇 번 회전시켜야 원하는 사탕들을 꺼낼 수 있는지 알아내세요. 
첫 번째 위치의 사탕을 꺼내는 과정 자체는 개수에 포함하지 않으며, 사탕을 꺼낸 후에 남은 사탕은 왼쪽으로 굴러옵니다.

예를 들어 사탕의 개수가 5개고, 
꺼내고자 하는 사탕이 차례대로 1번, 3번, 4번이라면 
초기 상태인 (1, 2, 3, 4, 5)의 사탕 케이스에서 (사탕 뽑기) - (좌회전) - (사탕 뽑기) - (사탕 뽑기)로 원하는 사탕을 모두 뽑아낼 수 있으므로 
한 번의 회전만이 필요한 것입니다.

답안:
// don't place package name. 

import java.io.*;

import java.util.*; 

// don't change 'Main' class name and  'public' accessor. 

public class Main {
	public static void rotate_left(Deque<Integer> deque,int n)
    {
    	for(int i=0;i<n;i++)
    	{
    		Integer temp=deque.removeFirst();
    		if(temp!=null)
    			deque.addLast(temp);
    	}
    }
	
    public static void rotate_right(Deque<Integer> deque,int n)
    {
    	for(int i=0;i<n;i++)
    	{
    		Integer temp=deque.removeLast();
    		if(temp!=null)
    			deque.addFirst(temp);
    	}
    }
	
    public static  int find(Deque<Integer> deque, Integer element) {
        Iterator<Integer> it = deque.iterator();
        int index = 0;

        while (it.hasNext()) {
            if (it.next().equals(element)) {
                return index;  // 요소를 찾으면 해당 인덱스를 반환
            }
            index++;
        }

        return -1;  // 요소를 찾지 못하면 -1 반환
    }
	
	public static void main(String[] args) throws IOException { 

        Scanner scanner = new Scanner(System.in); 

        int len = scanner.nextInt(); 

        int num = scanner.nextInt(); 
        
        Deque<Integer> deque = new ArrayDeque<>();
        int []candyList = new int[num];
        
        for(int i=0;i<len;i++)
        {
        	deque.add(i+1);
        }
        for(int i=0;i<num;i++)
        {
        	candyList[i]=scanner.nextInt();
        }
        
        
        int cnt=0;
        for(int i=0;i<num;i++)
        {
        	int temp=candyList[i];
        	int index=find(deque,temp);
        	
        	if(index==0)
        	{
        		deque.removeFirst();
        		len--;
        		continue;
        	}
        	int left_index=index;
        	int right_index=len-left_index;
        	if(left_index>right_index)
        	{
        		rotate_right(deque,right_index);
        		deque.removeFirst();
        		cnt +=right_index;
        	}
        	else
        	{
        		rotate_left(deque,left_index);
        		deque.removeFirst();
        		cnt +=left_index;
        	}
        	len--;
        }
        
        
        System.out.println(cnt); 

    }
}