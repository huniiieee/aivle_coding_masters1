문제:(BFS)
기성이는 수많은 건물들의 설계 도면을 검사해야 합니다. 
그러나 그 수가 너무나도 많아 일일이 확인하기엔 무리가 있습니다. 
따라서 도면을 컴퓨터로 스캔한 뒤, 일정 기준을 충족하는 도면들만 추려내 검사하려고 합니다.

도면은 예시 입력과 같이 '.'와 '#' 두 가지 문자로만 이루어져 있으며, 
각각 사람이 밟을 수 있는 바닥과 그렇지 않은 곳(벽, 기둥, 건물의 외부 등)을 의미합니다. 기성이가 확인하려는 조건은 다음과 같습니다.

1. 모든 '.'이 서로 연결되어 있다. 
어떤 두 '.'이 연결되어 있다는 것은, 한 '.'에서 출발해 상하좌우로 인접한 다른 '.'를 통해 1번 이상 이동하여 다른 '.'에 도달할 수 있음을 의미한다.
2. 6칸 이상의 '#'이 서로 연결되어 있으며 이 덩어리는 '.'로 둘러싸여있다. 어떤 두 '#'이 연결되어 있다는 것은, 
한 '#'에서 출발해 상하좌우로 인접한 다른 '#'를 통해 1번 이상 이동하여 다른 '#'에 도달할 수 있음을 의미한다.

입력으로 도면이 주어지면, 위 조건을 만족하는지 판별하는 프로그램을 작성해 주세요.

답안:

//don't place package name. 

import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
	static int[] dx= {-1,0,1,0};
	static int[] dy= {0,-1,0,1};
	
	static class Node{
		int x,y;
		Node(int x,int y)
		{
			this.x=x;
			this.y=y;
		}
	}
	
	static boolean bfsdot(char[][]map)
	{
		int i,j;
		boolean flag=false;
		for(i=1;i<9;i++)
		{
			for(j=1;j<19;j++)
			{
				if(map[i][j]=='.')
				{
					Queue<Node> q=new LinkedList<>();
					
					q.offer(new Node(i,j));
					while(!q.isEmpty())
					{
						Node cur=q.poll();
						map[cur.x][cur.y]='c';
						for(int u=0;u<4;u++)
						{
							int nx=cur.x+dx[u];
							int ny=cur.y+dy[u];
							if(nx>=1&&nx<9&&ny>=1&&ny<19&&map[nx][ny]=='.')
							{
								q.offer(new Node(nx,ny));
							}
						}
					}
					flag=true;
					break;
				}
			}	
			if(flag)
				break;
				
		}
		flag=false;
		for(i=1;i<9;i++)
		{
			for(j=1;j<19;j++)
			{
				if(map[i][j]=='.')
				{
					flag=true;
					break;
				}
			}
			if(flag)
				return false;
		}
		return true;
	}
	
	static boolean bfshash(char[][]map)
	{
		Queue<Node> q=new LinkedList<>();
		q.offer(new Node(0,0));
		map[0][0]='c';
		while(!q.isEmpty())
		{
			Node cur=q.poll();
			
			for(int u=0;u<4;u++)
			{
				int nx=cur.x+dx[u];
				int ny=cur.y+dy[u];
				if(nx>=0&&nx<10&&ny>=0&&ny<20&&map[nx][ny]=='#')
				{
					map[nx][ny]='c';
					q.offer(new Node(nx,ny));
				}
			}
		}
		
		boolean flag=false;
	
		for(int i=0;i<10;i++)
		{
			for(int j=0;j<20;j++)
			{
				if(map[i][j]=='#')
				{
				    int cnt=0;
					Queue<Node> q2=new LinkedList<>();
					
					q2.offer(new Node(i,j));
					map[i][j]='c';
					while(!q2.isEmpty())
					{
						Node cur=q2.poll();
						
						cnt++;
						
						for(int u=0;u<4;u++)
						{
							int nx=cur.x+dx[u];
							int ny=cur.y+dy[u];
							if(nx>=0&&nx<10&&ny>=0&&ny<20&&map[nx][ny]=='#')
							{
								map[nx][ny]='c';
								q2.offer(new Node(nx,ny));
							}
						}
					}
					if(cnt>=6)
					{
						flag=true;
						break;
					}
				}
			}
			if(flag)
				return true;
		}
		return false;
	}
 public static void main(String[] args) throws IOException { 

     Scanner scanner = new Scanner(System.in); 

     int num = scanner.nextInt(); 
     int []result= new int[num];
     scanner.nextLine();
     String temp="";
     char [][][]map= new char[num][10][20];
     
     for(int i=0;i<num;i++)
     {
    	 for(int j=0;j<10;j++)
    	 {
    		 temp=scanner.nextLine();
    		 for(int k=0;k<20;k++)
    			 map[i][j][k]=temp.charAt(k);
    	 }
     }
     
     for(int i=0;i<num;i++)
     {
    	 
    		
    	 if(bfsdot(map[i]))
    	 {
    		 if(bfshash(map[i]))
    			 result[i]=3;
    		 else
    			 result[i]=1;
    	 }
    	 else
    	 {
    		 if(bfshash(map[i]))
    			 result[i]=2;
    		 else
    			 result[i]=0;
    	 }
     }
      
     for(int i=0;i<num;i++)
     {
    	 System.out.println(result[i]);
     }
 }
}