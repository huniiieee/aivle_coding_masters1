문제:
유한그룹 신입사원 공채모집의 서류심사와 면접심사가 모두 끝났습니다. 
인사과 직원들은 점수가 높은 사람들을 뽑아 채용하려고 합니다. 
심사기준은 서류심사와 면접심사에 대해서 두 부분 모두 점수가 높은 사람부터 등수를 매기는 것입니다. 
하지만 두 사람의 우열을 가릴 수 없는 경우에는 두 사람이 같은 등수라고 판단합니다. 

먼저 A의 서류점수와 면접점수가 각각 70점, 50점이고 B의 서류점수와 면접점수가 각각 83점, 60점이라면, 
서류점수와 면접점수가 둘 다 A보다 B가 높기 때문에 B가 더 높은 등수여야 합니다. 

또, A의 서류점수와 면접점수가 각각 53점, 62점이고 B의 서류점수와 면접점수가 각각 53점, 36점이라면, 
서류점수는 동일하지만 면접점수가 A가 B보다 더 높기 때문에 A가 더 높은 등수여야 합니다.
물론 면접점수만 같고 서류점수만 다른 경우에도 동일한 방식으로 등수가 매겨집니다.  

한편, A의 서류점수와 면접점수가 각각 37점, 96점이고 B의 서류점수와 면접점수가 각각 72점, 28점이라면, 
어느 한 쪽이 더 높다고 할 수 없으므로 이 둘은 같은 등수여야 합니다. 

마지막으로, A의 서류점수와 면접점수가 각각 68점, 73점, B의 서류점수와 면접점수가 각각 56점, 64점, C의 서류점수와 면접점수가 각각 71점, 56점이라고 해봅시다. 
A와 B만 보았을 때는 서로의 우열을 가릴 수 있지만, A와 C는 서로의 우열을 가릴 수 없고, B와 C도 서로의 우열을 가릴 수 없습니다.
이러한 경우에는 A, B, C 모두 같은 등수로 판정되어야 합니다. 
 
N명의 지원자들의 서류점수와 면접점수가 주어졌을 때, 지원자들의 등수를 차례대로 출력하는 프로그램을 작성해주세요. 

답안:
import java.io.*;

import java.util.*; 

public class Main {
	static void ranking(int [][]score,int []rank,boolean [][]graph)
	{
		Arrays.sort(score,(a,b)->{
			if(b[0]!=a[0])
				return Integer.compare(b[0],a[0]);
			else {
					return Integer.compare(b[1],a[1]);
				}
		});
		int cnt=1;
		int tmp=1;
		for(int i=0;i<score.length;i++)
		{
			if(rank[score[i][2]]>0)
				continue;
			else
			{
				Queue<Integer> q=new LinkedList<>();
				q.offer(score[i][2]);
				while(!q.isEmpty())
				{
					int cur=q.poll();
					
					if(rank[cur]>0)
						continue;
					tmp++;
					rank[cur]=cnt;
					for(int j=0;j<score.length;j++)
					{
						if(graph[cur][j])
						{
							q.offer(j);
						}
					}
				}
				cnt=tmp;
			}
		}
	}

public static void main(String[] args) throws IOException { 

 Scanner scanner = new Scanner(System.in); 

 int num = scanner.nextInt(); 
 int []rank=new int[num];
 Arrays.fill(rank, 0);
 int [][] score=new int[num][3];
 boolean [][] graph=new boolean[num][num];
 for(int i=0;i<num;i++)
 {
	   
	   score[i][0]=scanner.nextInt();
	   score[i][1]=scanner.nextInt();
	   score[i][2]=i;
 }
 for(int i=0;i<num-1;i++)
 {
	 for(int j=i+1;j<num;j++)
	 {
		 if(((score[i][0]-score[j][0])*(score[i][1]-score[j][1]))<0)
		 {
			 graph[i][j]=true;
			 graph[j][i]=true;
		 }
		 else if((score[i][0]==score[j][0])&&(score[i][1]==score[j][1]))
		 {
			 graph[i][j]=true;
			 graph[j][i]=true;
		 }
	 }
 }

 ranking(score,rank,graph);
 for(int i=0;i<num;i++)
 {
      System.out.print(rank[i]+" ");
 }
}
}